{"version":3,"sources":["components/WarmTemp.js","components/ColdTemp.js","components/Mapbox.js","components/Collapsible.js","components/Data.js","components/Yelp.js","components/Forecast.js","components/Weather.js","App.js","index.js"],"names":["WarmTemp","state","warmTemp","loading","data","this","setState","className","Component","require","config","ColdTemp","mapboxgl","accessToken","Mapbox","geocode","useState","width","height","lat","lon","zoom","viewport","setViewPort","mapboxApiAccessToken","process","mapStyle","onViewportChange","Collapsible","props","isOpen","setIsOpen","Button","color","onClick","style","Collapse","Card","body","inverse","backgroundColor","borderColor","CardBody","Container","Row","Col","md","span","offset","src","responseObj","weather","icon","alt","description","xs","main","feels_like","temp_max","temp_min","humidity","Data","cod","name","Math","round","temp","Yelp","Forecast","setResponseObj","cityName","setCityName","onSubmit","e","preventDefault","fetch","then","response","json","catch","err","console","log","type","placeholder","value","onChange","target","Weather","loaded","React","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.af3e8b25.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass WarmTemp extends Component {\n    state = {\n        warmTemp: null,\n        loading: false,\n        data: [],\n    }\n\n    componentDidMount() {\n        this.setState({loading: true})\n    }\n\n\n    render () {\n        return (\n            <div className=\"warm\">\n                <p>It's warm outside.</p>\n            </div>\n        )\n    }\n\n}\n\nexport default WarmTemp;","import React, {Component} from 'react';\n\nrequire('dotenv').config();\n\nclass ColdTemp extends Component {\n    state = {\n        warmTemp: null,\n        loading: false,\n        data: [],\n    }\n\n    componentDidMount() {\n        this.setState({loading: true})\n    }\n\n\n    render () {\n        const isBackgroundNormal = true;\n\n        return (\n            <div className= {isBackgroundNormal ? 'background-normal' : 'background-cold'}>\n                <div className=\"loading-data\">\n                    {this.state.loading \n                    ? <p>It's cold outside.</p>\n                    : <div>\n                    </div> }\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default ColdTemp;\n\n","import React,{ useState } from 'react'\nimport mapboxgl from 'mapbox-gl';\nimport MapGL from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport '@mapbox/mapbox-gl-geocoder';\nimport './Mapbox.css';\nimport { Feature } from 'react-mapbox-gl';\n\nmapboxgl.accessToken = 'REACT_APP_MAPBOX_TOKEN';\n\n\nexport const Geocode = () => {\n\n  function getGeocode(props)\n  {  \n    console.log(props.cityName)\n    fetch (`https://api.mapbox.com/geocoding/v5/mapbox.places/${props.cityName}.json?access_token=${process.env.REACT_APP_MAPBOX_TOKEN}`)\n    .then(response => response.json())\n    .then (response => response.map((point, index) => ({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [\n          point.coordinates.longitude,\n          point.coordinates.latitude\n        ]\n      }\n    })))\n      .catch(err => {\n        console.log(err)})\n    }\n  }\n\nconst Mapbox = (geocode) => {\n  const [ viewport, setViewPort ] = useState({\n    width: \"100%\",\n    height: \"60vh\",\n    lat: 10,\n    lon: 500,\n    zoom: 10\n  });\n\n  return (\n    <div className=\"center\">\n      <MapGL\n        {...viewport} // pass to component\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        mapStyle=\"mapbox://styles/cerasams/ckbinh6se08yd1iqj9j4m8o8w\"\n        onViewportChange={(viewport) => {\n            setViewPort(viewport);\n        }}\n      >\n      </MapGL>\n    </div>\n  )\n}\n\nexport default Mapbox;","import React, { useState } from 'react';\nimport { Collapse, Button, CardBody, Card } from 'reactstrap';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nconst Collapsible = (props) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Button color=\"transparent\" onClick={toggle} style={{color: 'white' }}>. . .</Button>\n      <Collapse isOpen={isOpen}>\n        <Card body inverse style={{ backgroundColor: 'transparent', borderColor: 'transparent' }}>\n          <CardBody>\n                <Container>\n                  <Row>\n                    <Col md={{ span: 4, offset: 2 }}>\n                <div className=\"weather\">\n                              <p><img src={`https://openweathermap.org/img/w/${props.responseObj.weather[0].icon}.png`}\n                                  alt=\"{props.response.Obj.weather[0].icon}\"/></p>\n                              <p>{props.responseObj.weather[0].description}</p>\n                </div>\n                </Col>\n                <Col xs={6} md={4}>\n                <div className=\"details\">\n                  <p> Feels like: {props.responseObj.main.feels_like}째F </p>\n                  <p> High: {props.responseObj.main.temp_max}째F</p>\n                  <p> Low: {props.responseObj.main.temp_min}째F</p>\n                  <p> Humidity: {props.responseObj.main.humidity}% </p>\n                </div>\n                </Col>\n                </Row>\n            </Container>\n          </CardBody>\n        </Card>\n      </Collapse>\n    </div>\n  );\n}\n\nexport default Collapsible;","import React from 'react';\nimport './Data.css';\nimport WarmTemp from './WarmTemp';\nimport ColdTemp from './ColdTemp';\nimport Mapbox from './Mapbox';\nimport Collapsible from './Collapsible';\n\nconst Data = (props) => {\n    return (\n        <div>\n            {props.responseObj.cod === 200 ?\n            <div className=\"temperature\">\n                    <p> In {props.responseObj.name}, it is currently {Math.round(props.responseObj.main.temp)}째F.</p>\n                <Collapsible responseObj={props.responseObj} />\n                <div className=\"conditions\">\n                    {props.responseObj.main.temp >= 70 ? \n                        <p>\n                            <WarmTemp />\n                        </p>\n                    :\n                        <p>\n                            <ColdTemp />\n                        </p>\n                    }\n                </div>\n\n                <div className=\"map\">\n                    <Mapbox responseObj={props.responseObj} lat={props.responseObj.lat} lon={props.responseObj.lon} />\n                </div>\n\n            </div>\n            : null}\n        </div>\n    )\n}\n\nexport default Data;","import React, { Component } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport Restaurants from './Restaurants';\n\n// class Yelp extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             searchResults: []\n//         };\n//     }\n\n//     componentDidMount() {\n//         axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://api.yelp.com/v3/businesses/search?location=${this.cityName}`,{\n//             headers: {\n//                 Authorization: `Bearer ${process.env.REACT_APP_YELP_KEY}`\n//             },\n//             params: {\n//                 categories: 'restaurants',\n//                 limit: 10\n//             }\n//         })\n//         .then(response => {\n//             response.data.businesses.map(business => {\n//                 return {\n//                     name: business.name,\n//                     rating: business.rating\n//                 }\n//             })\n//         })\n//         .catch(err => {\n//           console.log(err)})\n//     }\n\n//     render () {\n//         return (\n//             <div className=\"results\">\n//             </div>\n//         )}\n// }\n\nconst Yelp = (props) => {\n    let [place, setPlace] = useState({});\n    \n    function fetchPlace(e)\n    {\n        axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://api.yelp.com/v3/businesses/search?location=${props.cityName}`,{\n            headers: {\n                Authorization: `Bearer ${process.env.REACT_APP_YELP_KEY}`\n            },\n            params: {\n                categories: 'restaurants',\n                limit: 10\n            }\n        })\n        .then(response => response.json())\n        .then (response => {\n          setPlace(place.data.businesses.map(res => ({\n              name: res.name,\n              rating: res.rating,\n              image: res.image_url,\n          }))\n          );\n        })\n        .catch(err => {\n        console.log(err)})\n    }\n\n        return (\n            <div>\n                <ul>\n                    \n                </ul>\n            </div>\n        );\n}\n\nexport default Yelp","import React from 'react';\nimport { useState } from 'react';\nimport Data from './Data';\nimport './Forecast.css'\nimport Yelp from './Yelp';\nimport SearchIcon from '@material-ui/icons/Search';\n\nrequire('dotenv').config();\n\nexport const Forecast = () => {\n  \n    let [responseObj, setResponseObj] = useState({});\n    let [cityName, setCityName] = useState('');\n  \n    function getForecast(e)\n    {\n      e.preventDefault();\n\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${process.env.REACT_APP_API_KEY}&units=imperial`)\n        .then(response => response.json())\n        .then (response => {\n          setResponseObj(response)\n        })\n        .catch(err => {\n          console.log(err)})\n    }\n  \n    return (\n        <div className=\"input-box\">\n          <form onSubmit={getForecast}>\n            <input\n                type=\"text\"\n                placeholder=\"Search\"\n                value={cityName}\n                onChange={(e) => setCityName(e.target.value)}\n            />\n            <button type=\"submit\">\n              <SearchIcon />\n            </button>\n            <Data responseObj={responseObj}/>\n            <Yelp cityName={cityName} />\n          </form>\n        </div>\n    )\n  }\n\n  export default Forecast;","import React from 'react';\nimport Forecast from './Forecast';\n\nrequire('dotenv').config();\n\nclass Weather extends React.Component {\n    state = {\n      loaded: false,\n    }\n    \n    componentDidMount() {\n      this.setState({loaded: true})\n    }\n  \n  \n    render(){\n      return (\n        <div>\n          <Forecast />\n        </div>\n      )\n    }\n  }\n\n  export default Weather;","import React from 'react';\nimport './App.css';\nimport Weather from './components/Weather';\n\nrequire('dotenv').config();\n\nfunction App() {\n  return (\n    <body>\n      <div className=\"App\">\n        <h1>Enter your city</h1>\n        <Weather />\n      </div>\n    </body>\n  );\n}\n\nexport default App;","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nrequire('dotenv').config();\n\nrender(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}